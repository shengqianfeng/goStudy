基本介绍：
  interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量。
  到某个自定义类型要使用的时候，要根据具体情况把这些方法写出来。

基本语法：

type 接口名 interface{
    method1(参数列表) 返回值列表
    method2(参数列表) 返回值列表
}
注意：自定义类型要实现接口的所有方法！

1 接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序
设计的多态和高内聚低耦合的思想。

2 go中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么
这个变量就实现这个接口。因此，go中没有implement这样的关键词



接口的注意事项和细节：
1 接口不能创建实例，但是可以指向一个实现了该接口的自定义类型的变量

2 接口中所有的方法都没有方法体，即都是没有实现的方法

3 在go中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型
实现了该接口

4 一个自定义类型只有实现了某个接口，才能将该自定义类型的实例赋值给接口类型

5 只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型

6 一个自定义类型可以实现多个接口

7 golang接口中不能有任何变量

8 一个接口（比如A接口）可以继承多个别的接口（比如BC接口），这时如果要实现A接口，也必须将
B，C接口的方法也全部实现。

9 接口类型默认是一个指针类型，如果没有对接口初始化就使用，那么会输出nil

10 空接口没有任何方法，所以所有类型都先了空接口，即我们可以把任何一个变量赋值给空接口




接口和继承的比较：
1 实现接口可以看做是对继承的一种补充
2 接口和继承解决的问题不同
  继承：主要解决代码复用和可维护性
  接口：主要价值在于设计好各种规范（方法），让其他自定义类型去实现这些方法

3 接口比继承更加灵活
继承是满足is a的关系，而接口只需满足like -a的关系

4 接口在一定程度上实现代码解耦






