切片
1 切片的英文slice
2 切片是数组的一个引用，因此切片是一个引用类型，在进行传递时遵守引用传递的机制
3 切片的使用和数组蕾西，遍历切片、访问切片的元素和求切片长度len都一样
4 切片的长度是可以变化的，因此切片是一个动态变化的数组
5 切片的定义基本语法
   var 切片名 []类型
   比如：var a []int



切片的内存布局：
1 slice是个引用类型
2 slice从底层来说，其实就是一个结构体struct，包含了切片后数组的首地址，切片长度，切片容量



切片的使用方式：
1 定义一个切片，然后让切片去直接引用一个已经创建好的数组，数组对程序是可见的

2 通过make来创建切片
    基本语法：var 切片名 []type = make（[]type,len.[cap])
    type:数据类型
    len：大小
    cap：可选，指定切片容量，其大小至少等于长度len
    ps：由make创建的slice，会隐式创建一个长度为len，数据类型type的数组对程序不可见
    如果没有给slice的各个元素赋值，那么会使用数据类型默认值。

3 定义一个切片，直接就指定具体数组，原理类似make


切片的遍历：
1 for循环
2 for-range


切片的动态扩容：
1 用append内置函数可以对切片进行动态追加，切片append的本质就是对数组扩容
2 go底层会创建一个新的数组newArr，数组大小为原切片长度加上扩容的元素个数
3 将slice原来包含的元素拷贝到新的数组newArr，slice长度和容量进行更新。
4 slice重新引用到新的newArr数组

关于拷贝的注意事项：
1 copy(para1,para2)：参数的数据类型是切片
2 para2长度如果大于para1，并不会copy异常，而是能拷贝几个para2就得到几个

切片注意事项和细节说明：
1 切片是引用类型，所以在传递时，遵守引用传递机制。


string和slice的使用：
1 string的底层是byte数组，因此string也可以进行切片处理，string本质也是一个切片
2 string和切片在内存中的形式，可以画出示意图。
3 string是不可变的，也就是说不能通过str[0]='a'方式来修改字符串
4 如果需要修改字符串，可以将string--》[]byte，或者[]rube--》修改--》重写转成string



