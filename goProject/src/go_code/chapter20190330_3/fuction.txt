函数的注意事项和细节：
    1 函数的形参列表可以是多个，返回值列表也可以是多个
    2 形参列表和返回值列表的数据类型可以是值类型和引用类型
    3 函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其他包文件使用，类似
    public，首字母小写，只能被本包文件使用，其他包不能使用，类似private

    4 函数中的变量时局部的，函数外不生效
    5 基本数据类型和数组默认都是值传递的，即进行值拷贝。在函数内修改，不会影响原来的值。
    6 如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&，函数内以指针方式操作
    变量，从效果上看类似引用。
    7 golang的函数不支持重载

    8 在go中，函数也是一种数据类型，可以赋值给一个变量，则该变量就是一个函数类型的变量，通过该变量可以实现
    对函数的调用。

    9 函数既然是一种数据类型，因此在GO中，函数可以作为形参并调用。

    10 为了简化数据类型定义，go支持自定义数据类型
        基本语法： type  自定义数据类型名  数据类型 //相当于一个别名
        比如：type myint int //这样就相当于把myint当int了
        比如：type mySum func(int,int) int //mySum就等价于一个函数类型 func(int,int) int 

    11 支持对函数的返回值命名
    12 使用_标识符忽略返回值
    13 go函数中支持可变参数（可变参数必须是函数形参列表的最后一个）
        //支持0到多个参数
        func sum(args... int) sum int{

        }
        args是slice切片，通过args(index)可以访问到各个值


函数参数的传递方式：
两种传递方式：
1 值传递
2 引用传递
其实，不管是值传递还是引用传递，传递的都是变量的副本，不同的是，值传递的是值得拷贝，
引用传递的是地址的拷贝。
一般来说，地址拷贝的效率高，因为数据量小，而值拷贝决定拷贝的数据大小，数据越大效率越低。
比如结构体默认是值拷贝。

值类型和引用类型：
1 值类型：默认值传递。内存通常在栈分配。基本数据类型int系列、float系列、bool、string、数组和结构体struct
2 引用类型：默认引用传递。内存通常在堆分配。指针、slice切片、map、管道chan、interface等都是引用类型


